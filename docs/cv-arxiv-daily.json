{"Automated Program Repair": {"2303.00303": "|**2023-03-01**|**The Inversive Relationship Between Bugs and Patches: An Empirical Study**|Jinhan Kim et.al.|[2303.00303](http://arxiv.org/abs/2303.00303)|null|\n", "2303.00202": "|**2023-03-02**|**PatchZero: Zero-Shot Automatic Patch Correctness Assessment**|Xin Zhou et.al.|[2303.00202](http://arxiv.org/abs/2303.00202)|null|\n", "2302.05020": "|**2023-02-27**|**Impact of Code Language Models on Automated Program Repair**|Nan Jiang et.al.|[2302.05020](http://arxiv.org/abs/2302.05020)|**[link](https://github.com/lin-tan/clm)**|\n", "2302.01857": "|**2023-02-27**|**KNOD: Domain Knowledge Distilled Tree Decoder for Automated Program Repair**|Nan Jiang et.al.|[2302.01857](http://arxiv.org/abs/2302.01857)|**[link](https://github.com/lin-tan/knod)**|\n", "2301.13246": "|**2023-01-30**|**Conversational Automated Program Repair**|Chunqiu Steven Xia et.al.|[2301.13246](http://arxiv.org/abs/2301.13246)|null|\n", "2301.12453": "|**2023-01-29**|**Boosting Automated Patch Correctness Prediction via Pre-trained Language Model**|Quanjun Zhang et.al.|[2301.12453](http://arxiv.org/abs/2301.12453)|null|\n", "2301.08653": "|**2023-01-20**|**An Analysis of the Automatic Bug Fixing Performance of ChatGPT**|Dominik Sobania et.al.|[2301.08653](http://arxiv.org/abs/2301.08653)|null|\n", "2301.03270": "|**2023-01-09**|**A Survey of Learning-based Automated Program Repair**|Quanjun Zhang et.al.|[2301.03270](http://arxiv.org/abs/2301.03270)|**[link](https://github.com/quanjunzhang/awesomelearningapr)**|\n", "2212.13773": "|**2022-12-29**|**A Bayesian Framework for Automated Debugging**|Sungmin Kang et.al.|[2212.13773](http://arxiv.org/abs/2212.13773)|null|\n", "2212.11414": "|**2022-12-21**|**Improving Automated Program Repair with Domain Adaptation**|Armin Zirak et.al.|[2212.11414](http://arxiv.org/abs/2212.11414)|null|\n", "2211.14875": "|**2022-12-22**|**Detect-Localize-Repair: A Unified Framework for Learning to Debug with CodeT5**|Nghi D. Q. Bui et.al.|[2211.14875](http://arxiv.org/abs/2211.14875)|null|\n", "2211.12821": "|**2022-11-23**|**Explainable AI for Pre-Trained Code Models: What Do They Learn? When They Do Not Work?**|Ahmad Haji Mohammadkhani et.al.|[2211.12821](http://arxiv.org/abs/2211.12821)|null|\n", "2211.12787": "|**2022-11-23**|**Program Repair**|Xiang Gao et.al.|[2211.12787](http://arxiv.org/abs/2211.12787)|null|\n", "2211.12104": "|**2022-11-22**|**Energy Consumption of Automated Program Repair**|Matias Martinez et.al.|[2211.12104](http://arxiv.org/abs/2211.12104)|null|\n", "2211.11526": "|**2022-11-21**|**Variable-Based Fault Localization via Enhanced Decision Tree**|Jiajun Jiang et.al.|[2211.11526](http://arxiv.org/abs/2211.11526)|null|\n", "2211.03911": "|**2022-11-07**|**Towards Extending the Range of Bugs That Automated Program Repair Can Handle**|Omar I. Al-Bataineh et.al.|[2211.03911](http://arxiv.org/abs/2211.03911)|null|\n", "2210.14179": "|**2022-10-25**|**Practical Program Repair in the Era of Large Pre-trained Language Models**|Chunqiu Steven Xia et.al.|[2210.14179](http://arxiv.org/abs/2210.14179)|null|\n", "2210.03986": "|**2022-10-08**|**TransRepair: Context-aware Program Repair for Compilation Errors**|Xueyang Li et.al.|[2210.03986](http://arxiv.org/abs/2210.03986)|null|\n", "2210.02651": "|**2022-10-06**|**Tracking the Evolution of Static Code Warnings: the State-of-the-Art and a Better Approach**|Junjie Li et.al.|[2210.02651](http://arxiv.org/abs/2210.02651)|null|\n", "2209.14876": "|**2022-09-29**|**Repairing Bugs in Python Assignments Using Large Language Models**|Jialu Zhang et.al.|[2209.14876](http://arxiv.org/abs/2209.14876)|null|\n", "2209.07211": "|**2022-09-16**|**On the acceptance by code reviewers of candidate security patches suggested by Automated Program Repair tools**|Aurora Papotti et.al.|[2209.07211](http://arxiv.org/abs/2209.07211)|null|\n", "2209.02930": "|**2022-09-22**|**Reflections on Software Failure Analysis**|Paschal C. Amusuo et.al.|[2209.02930](http://arxiv.org/abs/2209.02930)|null|\n", "2208.11640": "|**2022-12-05**|**Repair Is Nearly Generation: Multilingual Program Repair with LLMs**|Harshit Joshi et.al.|[2208.11640](http://arxiv.org/abs/2208.11640)|null|\n", "2207.11082": "|**2022-07-22**|**Test-based Patch Clustering for Automatically-Generated Patches Assessment**|Matias Martinez et.al.|[2207.11082](http://arxiv.org/abs/2207.11082)|null|\n", "2207.10739": "|**2022-07-21**|**BigIssue: A Realistic Bug Localization Benchmark**|Paul Kassianik et.al.|[2207.10739](http://arxiv.org/abs/2207.10739)|null|\n"}, "Automated Patch Correctness Assessment": {"2301.12453": "|**2023-01-29**|**Boosting Automated Patch Correctness Prediction via Pre-trained Language Model**|Quanjun Zhang et.al.|[2301.12453](http://arxiv.org/abs/2301.12453)|null|\n", "2301.03270": "|**2023-01-09**|**A Survey of Learning-based Automated Program Repair**|Quanjun Zhang et.al.|[2301.03270](http://arxiv.org/abs/2301.03270)|**[link](https://github.com/quanjunzhang/awesomelearningapr)**|\n", "2301.01113": "|**2023-01-03**|**Invalidator: Automated Patch Correctness Assessment via Semantic and Syntactic Reasoning**|Thanh Le-Cong et.al.|[2301.01113](http://arxiv.org/abs/2301.01113)|**[link](https://github.com/thanhlecongg/Invalidator)**|\n", "2212.13773": "|**2022-12-29**|**A Bayesian Framework for Automated Debugging**|Sungmin Kang et.al.|[2212.13773](http://arxiv.org/abs/2212.13773)|null|\n", "2204.00003": "|**2022-04-19**|**Ball 3D Localization From A Single Calibrated Image**|Gabriel Van Zandycke et.al.|[2204.00003](http://arxiv.org/abs/2204.00003)|**[link](https://github.com/gabriel-vanzandycke/deepsport)**|\n", "2105.07311": "|**2021-05-15**|**How Does Regression Test Selection Affect Program Repair? An Extensive Study on 2 Million Patches**|Yiling Lou et.al.|[2105.07311](http://arxiv.org/abs/2105.07311)|null|\n", "2103.16846": "|**2021-03-31**|**Exploring Plausible Patches Using Source Code Embeddings in JavaScript**|Viktor Csuvik et.al.|[2103.16846](http://arxiv.org/abs/2103.16846)|**[link](https://github.com/RGAI-USZ/JS-patch-exploration-APR2021)**|\n", "2009.06848": "|**2020-09-15**|**PRF: A Framework for Building Automatic Program Repair Prototypes for JVM-Based Languages**|Ali Ghanbari et.al.|[2009.06848](http://arxiv.org/abs/2009.06848)|null|\n", "2007.11449": "|**2020-07-22**|**Fast and Precise On-the-fly Patch Validation for All**|Lingchao Chen et.al.|[2007.11449](http://arxiv.org/abs/2007.11449)|null|\n", "1912.00117": "|**2020-07-24**|**Validation of Automatically Generated Patches: An Appetizer**|Ali Ghanbari et.al.|[1912.00117](http://arxiv.org/abs/1912.00117)|null|\n", "1906.01778": "|**2020-03-31**|**RESTORE: Retrospective Fault Localization Enhancing Automated Program Repair**|Tongtong Xu et.al.|[1906.01778](http://arxiv.org/abs/1906.01778)|null|\n", "1805.03454": "|**2020-09-28**|**A Comprehensive Study of Automatic Program Repair on the QuixBugs Benchmark**|He Ye et.al.|[1805.03454](http://arxiv.org/abs/1805.03454)|**[link](https://github.com/KTH/quixbugs-experiment)**|\n", "2303.06124": "|**2023-03-10**|**Self-supervised Training Sample Difficulty Balancing for Local Descriptor Learning**|Jiahan Zhang et.al.|[2303.06124](http://arxiv.org/abs/2303.06124)|null|\n"}, "Code Naturalness": {"2303.02432": "|**2023-03-04**|**Good Gottesman-Kitaev-Preskill codes from the NTRU cryptosystem**|Jonathan Conrad et.al.|[2303.02432](http://arxiv.org/abs/2303.02432)|null|\n", "2211.12301": "|**2022-11-22**|**Is this correct? Let's check!**|Omri Ben-Eliezer et.al.|[2211.12301](http://arxiv.org/abs/2211.12301)|null|\n", "2208.06042": "|**2022-08-11**|**CodeBERT-nt: code naturalness via CodeBERT**|Ahmed Khanfir et.al.|[2208.06042](http://arxiv.org/abs/2208.06042)|null|\n", "2208.05361": "|**2022-08-26**|**Prompt-tuned Code Language Model as a Neural Knowledge Base for Type Inference in Statically-Typed Partial Code**|Qing Huang et.al.|[2208.05361](http://arxiv.org/abs/2208.05361)|null|\n", "2203.08388": "|**2023-02-07**|**MCoNaLa: A Benchmark for Code Generation from Multiple Natural Languages**|Zhiruo Wang et.al.|[2203.08388](http://arxiv.org/abs/2203.08388)|**[link](https://github.com/zorazrw/multilingual-conala)**|\n", "2111.00580": "|**2021-10-31**|**Text Classification for Task-based Source Code Related Questions**|Sairamvinay Vijayaraghavan et.al.|[2111.00580](http://arxiv.org/abs/2111.00580)|null|\n", "2109.05771": "|**2021-09-13**|**Perturbation CheckLists for Evaluating NLG Evaluation Metrics**|Ananya B. Sai et.al.|[2109.05771](http://arxiv.org/abs/2109.05771)|**[link](https://github.com/iitmnlp/evaleval)**|\n", "2109.03341": "|**2021-09-07**|**Software Vulnerability Detection via Deep Learning over Disaggregated Code Graph Representation**|Yufan Zhuang et.al.|[2109.03341](http://arxiv.org/abs/2109.03341)|null|\n", "2109.00270": "|**2022-02-25**|**Flag codes of maximum distance and constructions using Singer groups**|Miguel \u00c1ngel Navarro-P\u00e9rez et.al.|[2109.00270](http://arxiv.org/abs/2109.00270)|null|\n", "2104.13905": "|**2021-12-16**|**CRC-Aided List Decoding of Convolutional Codes in the Short Blocklength Regime**|Hengjie Yang et.al.|[2104.13905](http://arxiv.org/abs/2104.13905)|null|\n", "2011.02734": "|**2020-12-18**|**Consistent Flag Codes**|Clementa Alonso-Gonz\u00e1lez et.al.|[2011.02734](http://arxiv.org/abs/2011.02734)|null|\n", "2008.04810": "|**2020-08-12**|**The holographic map as a conditional expectation**|Thomas Faulkner et.al.|[2008.04810](http://arxiv.org/abs/2008.04810)|null|\n", "1905.03752": "|**2019-05-09**|**Compositional Coding for Collaborative Filtering**|Chenghao Liu et.al.|[1905.03752](http://arxiv.org/abs/1905.03752)|**[link](https://github.com/3140102441/CCCF)**|\n", "1811.04322": "|**2023-02-04**|**Channel Coding at Low Capacity**|Mohammad Fereydounian et.al.|[1811.04322](http://arxiv.org/abs/1811.04322)|null|\n", "1807.03694": "|**2018-07-05**|**Sparse Representation and Non-Negative Matrix Factorization for image denoise**|R. M. Farouk et.al.|[1807.03694](http://arxiv.org/abs/1807.03694)|null|\n", "1705.09042": "|**2017-05-25**|**Data-Driven Program Completion**|Yanxin Lu et.al.|[1705.09042](http://arxiv.org/abs/1705.09042)|null|\n", "1612.03125": "|**2016-12-09**|**Paradoxes in Leaky Microbial Trade**|Yoav Kallus et.al.|[1612.03125](http://arxiv.org/abs/1612.03125)|null|\n", "1306.5609": "|**2013-06-24**|**Partial Spreads in Random Network Coding**|Elisa Gorla et.al.|[1306.5609](http://arxiv.org/abs/1306.5609)|null|\n", "1109.0800": "|**2011-09-05**|**Quantized Compute and Forward: A Low-Complexity Architecture for Distributed Antenna Systems**|Song-Nam Hong et.al.|[1109.0800](http://arxiv.org/abs/1109.0800)|null|\n", "0707.4311": "|**2007-07-29**|**Embedded Rank Distance Codes for ISI channels**|S. Dusad et.al.|[0707.4311](http://arxiv.org/abs/0707.4311)|null|\n", "cs/0508058": "|**2005-08-11**|**Entropy coding with Variable Length Re-writing Systems**|Herve Jegou et.al.|[cs/0508058](http://arxiv.org/abs/cs/0508058)|null|\n"}, "Bug/Vulnerability Management": {"2303.02695": "|**2023-03-05**|**Understanding Bugs in Multi-Language Deep Learning Frameworks**|Zengyang Li et.al.|[2303.02695](http://arxiv.org/abs/2303.02695)|null|\n", "2301.01235": "|**2023-01-03**|**An Empirical Investigation into the Reproduction of Bug Reports for Android Apps**|Jack Johnson et.al.|[2301.01235](http://arxiv.org/abs/2301.01235)|null|\n", "2210.15159": "|**2022-10-27**|**Comparing One with Many -- Solving Binary2source Function Matching Under Function Inlining**|Ang Jia et.al.|[2210.15159](http://arxiv.org/abs/2210.15159)|null|\n", "2209.03260": "|**2022-09-07**|**VulCurator: A Vulnerability-Fixing Commit Detector**|Truong Giang Nguyen et.al.|[2209.03260](http://arxiv.org/abs/2209.03260)|**[link](https://github.com/ntgiang71096/vfdetector)**|\n", "2208.02369": "|**2022-10-24**|**Deep VULMAN: A Deep Reinforcement Learning-Enabled Cyber Vulnerability Management Framework**|Soumyadeep Hore et.al.|[2208.02369](http://arxiv.org/abs/2208.02369)|null|\n", "2206.11171": "|**2022-06-22**|**Attack Techniques and Threat Identification for Vulnerabilities**|Constantin Adam et.al.|[2206.11171](http://arxiv.org/abs/2206.11171)|null|\n", "2205.12713": "|**2022-05-25**|**jTrans: Jump-Aware Transformer for Binary Code Similarity**|Hao Wang et.al.|[2205.12713](http://arxiv.org/abs/2205.12713)|**[link](https://github.com/vul337/jtrans)**|\n", "2203.10403": "|**2022-03-19**|**An Exploratory Study into Vulnerability Chaining Blindness Terminology and Viability**|Nikki Robinson et.al.|[2203.10403](http://arxiv.org/abs/2203.10403)|null|\n", "2112.02240": "|**2021-12-04**|**TRACER: Finding Patches for Open Source Software Vulnerabilities**|Congying Xu et.al.|[2112.02240](http://arxiv.org/abs/2112.02240)|null|\n", "2107.06181": "|**2021-07-10**|**Intermittent Jamming against Telemetry and Telecommand of Satellite Systems and A Learning-driven Detection Strategy**|Selen Gecgel et.al.|[2107.06181](http://arxiv.org/abs/2107.06181)|null|\n", "2101.10865": "|**2021-01-22**|**On managing vulnerabilities in AI/ML systems**|Jonathan M. Spring et.al.|[2101.10865](http://arxiv.org/abs/2101.10865)|null|\n", "2101.02780": "|**2022-10-19**|**SHARKS: Smart Hacking Approaches for RisK Scanning in Internet-of-Things and Cyber-Physical Systems based on Machine Learning**|Tanujay Saha et.al.|[2101.02780](http://arxiv.org/abs/2101.02780)|null|\n", "1909.11166": "|**2019-09-24**|**Ethical Hacking for IoT Security: A First Look into Bug Bounty Programs and Responsible Disclosure**|Aaron Yi Ding et.al.|[1909.11166](http://arxiv.org/abs/1909.11166)|null|\n", "1908.04856": "|**2019-08-13**|**Exploit Prediction Scoring System (EPSS)**|Jay Jacobs et.al.|[1908.04856](http://arxiv.org/abs/1908.04856)|null|\n", "1807.02458": "|**2018-07-06**|**A Practical Approach to the Automatic Classification of Security-Relevant Commits**|Antonino Sabetta et.al.|[1807.02458](http://arxiv.org/abs/1807.02458)|null|\n", "1705.05347": "|**2017-05-15**|**Software Vulnerability Analysis Using CPE and CVE**|Luis Alberto Benthin Sanguino et.al.|[1705.05347](http://arxiv.org/abs/1705.05347)|null|\n", "1209.6484": "|**2012-09-28**|**Vulnerability Management for an Enterprise Resource Planning System**|Shivani Goel et.al.|[1209.6484](http://arxiv.org/abs/1209.6484)|null|\n"}, "Regression Bugs/Bug Inducing Commit": {"2301.10546": "|**2023-01-25**|**Backward Compatibility During Data Updates by Weight Interpolation**|Raphael Schumann et.al.|[2301.10546](http://arxiv.org/abs/2301.10546)|null|\n", "2212.06376": "|**2023-02-15**|**Fonte: Finding Bug Inducing Commits from Failures**|Gabin An et.al.|[2212.06376](http://arxiv.org/abs/2212.06376)|**[link](https://github.com/coinse/fonte)**|\n", "2212.03399": "|**2022-12-07**|**Utilizing Source Code Syntax Patterns to Detect Bug Inducing Commits using Machine Learning Models**|Md Nadim et.al.|[2212.03399](http://arxiv.org/abs/2212.03399)|null|\n", "2204.10899": "|**2022-04-22**|**Comparative Study of Machine Learning Test Case Prioritization for Continuous Integration Testing**|Dusica Marijan et.al.|[2204.10899](http://arxiv.org/abs/2204.10899)|null|\n", "2109.12389": "|**2022-07-04**|**RegMiner: Towards Constructing a Large Regression Dataset from Code Evolution History**|Xuezhi Song et.al.|[2109.12389](http://arxiv.org/abs/2109.12389)|**[link](https://github.com/songxuezhi/regminer)**|\n", "2106.10789": "|**2021-06-21**|**An empirical evaluation of the usefulness of Tree Kernels for Commit-time Defect Detection in large software systems**|Hareem Sahar et.al.|[2106.10789](http://arxiv.org/abs/2106.10789)|null|\n", "2105.03048": "|**2021-05-07**|**Regression Bugs Are In Your Model! Measuring, Reducing and Analyzing Regressions In NLP Model Updates**|Yuqing Xie et.al.|[2105.03048](http://arxiv.org/abs/2105.03048)|null|\n", "2103.11894": "|**2021-03-22**|**Mea culpa: How developers fix their own simple bugs differently from other developers**|Wenhan Zhu et.al.|[2103.11894](http://arxiv.org/abs/2103.11894)|null|\n", "2102.03300": "|**2021-02-05**|**Evaluating SZZ Implementations Through a Developer-informed Oracle**|Giovanni Rosa et.al.|[2102.03300](http://arxiv.org/abs/2102.03300)|**[link](https://github.com/grosa1/icse2021-szz-replication-package)**|\n", "2101.08889": "|**2021-01-21**|**TAOS-CI: Lightweight & Modular Continuous Integration System for Edge Computing**|Geunsik Lim et.al.|[2101.08889](http://arxiv.org/abs/2101.08889)|null|\n", "1505.01286": "|**2015-05-06**|**Localization of real world regression Bugs using single execution**|Dekel Cohen et.al.|[1505.01286](http://arxiv.org/abs/1505.01286)|null|\n"}, "Defect Prediction": {"2303.04738": "|**2023-03-08**|**Defectors: A Large, Diverse Python Dataset for Defect Prediction**|Parvez Mahbub et.al.|[2303.04738](http://arxiv.org/abs/2303.04738)|null|\n", "2302.06065": "|**2023-02-13**|**A Systematic Literature Review of Explainable AI for Software Engineering**|Ahmad Haji Mohammadkhani et.al.|[2302.06065](http://arxiv.org/abs/2302.06065)|null|\n", "2302.03924": "|**2023-02-08**|**CCRep: Learning Code Change Representations via Pre-Trained Code Model and Query Back**|Zhongxin Liu et.al.|[2302.03924](http://arxiv.org/abs/2302.03924)|**[link](https://github.com/zju-ctag/ccrep)**|\n", "2302.00394": "|**2023-02-04**|**Toward a consistent performance evaluation for defect prediction models**|Xutong Liu et.al.|[2302.00394](http://arxiv.org/abs/2302.00394)|null|\n", "2301.08022": "|**2023-01-19**|**Source Code Metrics for Software Defects Prediction**|Dominik Arne Rebro et.al.|[2301.08022](http://arxiv.org/abs/2301.08022)|null|\n", "2301.06303": "|**2023-01-16**|**The Probabilistic Bounds on the Feasibility of the Defect Prediction Models in Real-World Testing Environments**|Umamaheswara Sharma B et.al.|[2301.06303](http://arxiv.org/abs/2301.06303)|null|\n", "2301.05411": "|**2023-01-13**|**Do the Defect Prediction Models Really Work?**|Umamaheswara Sharma B et.al.|[2301.05411](http://arxiv.org/abs/2301.05411)|null|\n", "2212.14404": "|**2022-12-29**|**Cross Version Defect Prediction with Class Dependency Embeddings**|Moti Cohen et.al.|[2212.14404](http://arxiv.org/abs/2212.14404)|null|\n", "2212.05976": "|**2022-12-12**|**A Pre-Trained BERT Model for Android Applications**|Tiezhu Sun et.al.|[2212.05976](http://arxiv.org/abs/2212.05976)|null|\n", "2212.03399": "|**2022-12-07**|**Utilizing Source Code Syntax Patterns to Detect Bug Inducing Commits using Machine Learning Models**|Md Nadim et.al.|[2212.03399](http://arxiv.org/abs/2212.03399)|null|\n", "2210.13782": "|**2022-10-25**|**Towards Trustworthy Multi-label Sewer Defect Classification via Evidential Deep Learning**|Chenyang Zhao et.al.|[2210.13782](http://arxiv.org/abs/2210.13782)|null|\n", "2210.02236": "|**2022-10-05**|**On the Use of Deep Learning in Software Defect Prediction**|G\u00f6rkem Giray et.al.|[2210.02236](http://arxiv.org/abs/2210.02236)|null|\n", "2209.14057": "|**2022-09-28**|**How Far Does the Predictive Decision Impact the Software Project? The Cost, Service Time, and Failure Analysis from a Cross-Project Defect Prediction Model**|Umamaheswara Sharma B et.al.|[2209.14057](http://arxiv.org/abs/2209.14057)|**[link](https://github.com/ekamnit/cpdp-hiel)**|\n", "2209.13978": "|**2022-09-28**|**Feature Sets in Just-in-Time Defect Prediction: An Empirical Evaluation**|Peter Bludau et.al.|[2209.13978](http://arxiv.org/abs/2209.13978)|null|\n", "2209.14299": "|**2022-09-10**|**Software Defect Prediction Using Support Vector Machine**|Haneen Abu Alhija et.al.|[2209.14299](http://arxiv.org/abs/2209.14299)|null|\n", "2208.07471": "|**2022-08-15**|**On the Adoption and Effects of Source Code Reuse on Defect Proneness and Maintenance Effort**|Giammaria Giordano et.al.|[2208.07471](http://arxiv.org/abs/2208.07471)|null|\n", "2207.14298": "|**2022-07-28**|**Learning Personalized Representations using Graph Convolutional Network**|Hongyu Shen et.al.|[2207.14298](http://arxiv.org/abs/2207.14298)|null|\n", "2207.11680": "|**2022-07-24**|**No More Fine-Tuning? An Experimental Evaluation of Prompt Tuning in Code Intelligence**|Chaozheng Wang et.al.|[2207.11680](http://arxiv.org/abs/2207.11680)|**[link](https://github.com/adf1178/pt4code)**|\n", "2206.12927": "|**2022-06-26**|**An Empirical Study on Bug Severity Estimation Using Source Code Metrics and Static Analysis**|Ehsan Mashhadi et.al.|[2206.12927](http://arxiv.org/abs/2206.12927)|null|\n", "2206.10959": "|**2022-08-26**|**Defect Prediction Using Stylistic Metrics**|Rafed Muhammad Yasir et.al.|[2206.10959](http://arxiv.org/abs/2206.10959)|null|\n", "2206.07919": "|**2022-06-16**|**An Empirical Study on the Effectiveness of Data Resampling Approaches for Cross-Project Software Defect Prediction**|Kwabena Ebo Bennin et.al.|[2206.07919](http://arxiv.org/abs/2206.07919)|null|\n", "2206.06549": "|**2022-06-14**|**Using Defect Prediction to Improve the Bug Detection Capability of Search-Based Software Testing**|Anjana Perera et.al.|[2206.06549](http://arxiv.org/abs/2206.06549)|null|\n", "2204.04856": "|**2022-04-11**|**Defect Identification, Categorization, and Repair: Better Together**|Chao Ni et.al.|[2204.04856](http://arxiv.org/abs/2204.04856)|null|\n", "2203.03544": "|**2022-03-07**|**Online Adaptable Bug Localization for Rapidly Evolving Software**|Agnieszka Ciborowska et.al.|[2203.03544](http://arxiv.org/abs/2203.03544)|**[link](https://github.com/aciborowska/jingo)**|\n", "2203.00101": "|**2022-04-30**|**ApacheJIT: A Large Dataset for Just-In-Time Defect Prediction**|Hossein Keshavarz et.al.|[2203.00101](http://arxiv.org/abs/2203.00101)|null|\n"}, "Bug Explanation": {"2303.04738": "|**2023-03-08**|**Defectors: A Large, Diverse Python Dataset for Defect Prediction**|Parvez Mahbub et.al.|[2303.04738](http://arxiv.org/abs/2303.04738)|null|\n", "1610.08607": "|**2016-10-27**|**Learning Likely Invariants to Explain Why a Program Fails**|Jun Sun et.al.|[1610.08607](http://arxiv.org/abs/1610.08607)|null|\n"}}